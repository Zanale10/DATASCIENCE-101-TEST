{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOZ0vYYU/qbISQUQtbC6ca6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Zanale10/DATASCIENCE-101-TEST/blob/main/No%20show%20%20machine%20learning%20Algorithm%20ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "DSA 6101:PRINCIPLES OF DATA SCIENCE\n",
        "\n",
        "\n",
        "GROUP 5\n",
        "\n",
        "\n",
        "JOHN ALLAN-25/04382\n",
        "\n",
        "\n",
        "ZANALE RAQUEL-25/01875\n",
        "\n",
        "\n",
        "HAKIZIMANA SONIA-25/03907\n",
        "\n",
        "\n",
        "STEPHEN LEKUCHULA-"
      ],
      "metadata": {
        "id": "spJrLCJ8Mv2b"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Downloading data set from Kaggle"
      ],
      "metadata": {
        "id": "uaQXaVVQvTWL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import kagglehub\n",
        "\n",
        "# Download latest version\n",
        "path = kagglehub.dataset_download(\"joniarroba/noshowappointments\")\n",
        "\n",
        "print(\"Path to dataset files:\", path)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K3pC1pFZxWZu",
        "outputId": "2a47a2ba-755d-4bb2-fbd0-21292378081f"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading from https://www.kaggle.com/api/v1/datasets/download/joniarroba/noshowappointments?dataset_version_number=5...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 2.40M/2.40M [00:00<00:00, 88.4MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting files...\n",
            "Path to dataset files: /root/.cache/kagglehub/datasets/joniarroba/noshowappointments/versions/5\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "path = \"/root/.cache/kagglehub/datasets/joniarroba/noshowappointments/versions/5\"\n",
        "os.listdir(path)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VJ3HrwDdys6t",
        "outputId": "ad26ced7-71ee-4cc7-f2ac-84dd9acc4c81"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['KaggleV2-May-2016.csv']"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(path + \"/KaggleV2-May-2016.csv\")\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "qFYg7v4By532",
        "outputId": "675c6b1e-a850-47b0-814b-e7889e87357b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      PatientId  AppointmentID Gender          ScheduledDay  \\\n",
              "0  2.987250e+13        5642903      F  2016-04-29T18:38:08Z   \n",
              "1  5.589978e+14        5642503      M  2016-04-29T16:08:27Z   \n",
              "2  4.262962e+12        5642549      F  2016-04-29T16:19:04Z   \n",
              "3  8.679512e+11        5642828      F  2016-04-29T17:29:31Z   \n",
              "4  8.841186e+12        5642494      F  2016-04-29T16:07:23Z   \n",
              "\n",
              "         AppointmentDay  Age      Neighbourhood  Scholarship  Hipertension  \\\n",
              "0  2016-04-29T00:00:00Z   62    JARDIM DA PENHA            0             1   \n",
              "1  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             0   \n",
              "2  2016-04-29T00:00:00Z   62      MATA DA PRAIA            0             0   \n",
              "3  2016-04-29T00:00:00Z    8  PONTAL DE CAMBURI            0             0   \n",
              "4  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             1   \n",
              "\n",
              "   Diabetes  Alcoholism  Handcap  SMS_received No-show  \n",
              "0         0           0        0             0      No  \n",
              "1         0           0        0             0      No  \n",
              "2         0           0        0             0      No  \n",
              "3         0           0        0             0      No  \n",
              "4         1           0        0             0      No  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46f9cee8-5b9b-4da5-9a47-e15ace0b5f7a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PatientId</th>\n",
              "      <th>AppointmentID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>ScheduledDay</th>\n",
              "      <th>AppointmentDay</th>\n",
              "      <th>Age</th>\n",
              "      <th>Neighbourhood</th>\n",
              "      <th>Scholarship</th>\n",
              "      <th>Hipertension</th>\n",
              "      <th>Diabetes</th>\n",
              "      <th>Alcoholism</th>\n",
              "      <th>Handcap</th>\n",
              "      <th>SMS_received</th>\n",
              "      <th>No-show</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.987250e+13</td>\n",
              "      <td>5642903</td>\n",
              "      <td>F</td>\n",
              "      <td>2016-04-29T18:38:08Z</td>\n",
              "      <td>2016-04-29T00:00:00Z</td>\n",
              "      <td>62</td>\n",
              "      <td>JARDIM DA PENHA</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.589978e+14</td>\n",
              "      <td>5642503</td>\n",
              "      <td>M</td>\n",
              "      <td>2016-04-29T16:08:27Z</td>\n",
              "      <td>2016-04-29T00:00:00Z</td>\n",
              "      <td>56</td>\n",
              "      <td>JARDIM DA PENHA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.262962e+12</td>\n",
              "      <td>5642549</td>\n",
              "      <td>F</td>\n",
              "      <td>2016-04-29T16:19:04Z</td>\n",
              "      <td>2016-04-29T00:00:00Z</td>\n",
              "      <td>62</td>\n",
              "      <td>MATA DA PRAIA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8.679512e+11</td>\n",
              "      <td>5642828</td>\n",
              "      <td>F</td>\n",
              "      <td>2016-04-29T17:29:31Z</td>\n",
              "      <td>2016-04-29T00:00:00Z</td>\n",
              "      <td>8</td>\n",
              "      <td>PONTAL DE CAMBURI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8.841186e+12</td>\n",
              "      <td>5642494</td>\n",
              "      <td>F</td>\n",
              "      <td>2016-04-29T16:07:23Z</td>\n",
              "      <td>2016-04-29T00:00:00Z</td>\n",
              "      <td>56</td>\n",
              "      <td>JARDIM DA PENHA</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46f9cee8-5b9b-4da5-9a47-e15ace0b5f7a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46f9cee8-5b9b-4da5-9a47-e15ace0b5f7a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46f9cee8-5b9b-4da5-9a47-e15ace0b5f7a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0b237062-d8c0-491c-854c-0cbe261d5151\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0b237062-d8c0-491c-854c-0cbe261d5151')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0b237062-d8c0-491c-854c-0cbe261d5151 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "**Clearly define the problem and business objectives.**\n",
        "\n",
        " The county health department is experiencing high rates of patient no-shows at scheduled clinic appointments, leading to inefficient use of medical resources, increased waiting times, and decreased access to care. This project aims to develop a machine learning model that can accurately predict whether a patient will show up for their scheduled appointment, using historical appointment data. By identifying high-risk patients in advance, the healthcare system can take proactive measures to reduce no-show rates, optimize clinic operations, and improve patient outcomes.\n",
        "\n",
        "**Primary Business objectives**\n",
        "To build and deploy a machine learning model that predicts whether a patient will attend\n",
        "secondary:\n",
        "\n",
        "\n",
        "1.Efficiency improvement in scheduling-not considering availability of the patient\n",
        "\n",
        "\n",
        "2.policy descions around descions so that incase the patient doesnt show up there is a guideline\n",
        "\n",
        "\n",
        "3.Reminders shared proactively to all the patients.\n",
        "\n",
        "**Secondary Business Objectives**\n",
        "\n",
        "\n",
        " To improve resource allocation, and enhance overall efficiency and quality of healthcare service delivery."
      ],
      "metadata": {
        "id": "68cHnUYb3j5M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explain the potential impact of your model on the healthcare system and stakeholders.**\n",
        "\n",
        "1.Patients-The model has the potential to greatly improve patients health by sending timely reminders for appointments, check-ups, or medication refills. These gentle nudges help ensure that patients get the care they need when they need it reducing the risk of complications from missed or delayed visits.\n",
        "\n",
        "\n",
        "2.County health department-When patients report on time for services, it leads to better planning and optimized use of available resources such as medications, staff time, and clinic space. This increased efficiency not only helps in reducing wastage but also improves service coverage.\n",
        "\n",
        "\n",
        "3.health care providers-For doctors and nurses timely patient attendance improves productivity as it reduces the stress of managing unpredictable schedules.\n",
        "\n",
        "\n",
        "4.IT team/Personell-intergrate predictive tools with existing health information systems which ensures continuity of data.\n"
      ],
      "metadata": {
        "id": "f4Ti9fsK6YmF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Identify key performance indicators (KPIs) for project success.**\n",
        "\n",
        "\n",
        "**MODEL KPIs**\n",
        "\n",
        "1.Accuracy-use total proportions to measure how accurate it was based on the total\n",
        "\n",
        "$Accuracy = \\frac{\\text{Correct Predictions}}{\\text{Total Predictions}}$\n",
        "\n",
        "\n",
        "\n",
        "2.precision-how precise were the no shows compared to predicted that is Out of all patients the model predicted as no-shows, how many truly didn’t show up?\n",
        "\n",
        "**Precision** = $\\frac{\\text{True Positives}}{\\text{True Positives} + \\text{False Positives}}$\n",
        "\n",
        "\n",
        " where:\n",
        "True Positives (TP) = predicted no-show, actually no-show\n",
        "\n",
        "False Positives (FP) = predicted no-show, actually showed up\n",
        "\n",
        "False Negatives (FN) = predicted show-up, actually no-show\n",
        "\n",
        "\n",
        "\n",
        "3.Recall (Sensitivity) – How many actual no-shows were correctly predicted.\n",
        "\n",
        "**Recall (Sensitivity)** = $\\frac{\\text{True Positives}}{\\text{True Positives} + \\text{False Negatives}}$\n",
        "\n",
        "\n",
        "4.F1-Score – This metric helps strike a balance between precision and recall, making sure the model performs well on both sides.For example, if the model predicts many patients as potential no-shows, but most of them would have actually shown up, that’s low precision we’ve wrongly flagged patients and could strain trust in the system.\n",
        "\n",
        "**F1-Score** = $\\frac{2 \\times \\text{Precision} \\times \\text{Recall}}{\\text{Precision} + \\text{Recall}}$\n",
        "\n",
        "\n",
        "5.No show rate-This refers to the percentage of scheduled patients who do not show up for their appointments.Reduced rates signify better performance\n",
        "\n",
        "6. Number of Patients per Doctor-Shows the average number of patients each doctor handles. Affected by no-shows, this metric helps measure doctor workload and planning.\n",
        "\n",
        "7. Patient Satisfaction via Surveys\n",
        "8.Model Adoption Rate by Facilities-The more the users embracing the models use in facilities after deployment the better the success rate.\n",
        "\n"
      ],
      "metadata": {
        "id": "S5GKdALc9tDg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "The dataset consists of Data taken from a medical Health Centre in Brazil. It contains records of medical appointments and shows whether patients showed up for there appointments."
      ],
      "metadata": {
        "id": "bl-vJm0riYaB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.dtypes)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DLSuXbPCugfJ",
        "outputId": "1f97599b-368a-4caa-9f32-f19fda880618"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PatientId         float64\n",
            "AppointmentID       int64\n",
            "Gender             object\n",
            "ScheduledDay       object\n",
            "AppointmentDay     object\n",
            "Age                 int64\n",
            "Neighbourhood      object\n",
            "Scholarship         int64\n",
            "Hipertension        int64\n",
            "Diabetes            int64\n",
            "Alcoholism          int64\n",
            "Handcap             int64\n",
            "SMS_received        int64\n",
            "No-show            object\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.isnull().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bkEn3c4Zt09d",
        "outputId": "e44374f7-fb25-4abb-86ba-6039215514b7"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PatientId         0\n",
            "AppointmentID     0\n",
            "Gender            0\n",
            "ScheduledDay      0\n",
            "AppointmentDay    0\n",
            "Age               0\n",
            "Neighbourhood     0\n",
            "Scholarship       0\n",
            "Hipertension      0\n",
            "Diabetes          0\n",
            "Alcoholism        0\n",
            "Handcap           0\n",
            "SMS_received      0\n",
            "No-show           0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.describe())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P5XZB0mPuVIr",
        "outputId": "65c61f51-63db-4b07-b6ba-9c2a5ae3541a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          PatientId  AppointmentID            Age    Scholarship  \\\n",
            "count  1.105270e+05   1.105270e+05  110527.000000  110527.000000   \n",
            "mean   1.474963e+14   5.675305e+06      37.088874       0.098266   \n",
            "std    2.560949e+14   7.129575e+04      23.110205       0.297675   \n",
            "min    3.921784e+04   5.030230e+06      -1.000000       0.000000   \n",
            "25%    4.172614e+12   5.640286e+06      18.000000       0.000000   \n",
            "50%    3.173184e+13   5.680573e+06      37.000000       0.000000   \n",
            "75%    9.439172e+13   5.725524e+06      55.000000       0.000000   \n",
            "max    9.999816e+14   5.790484e+06     115.000000       1.000000   \n",
            "\n",
            "        Hipertension       Diabetes     Alcoholism        Handcap  \\\n",
            "count  110527.000000  110527.000000  110527.000000  110527.000000   \n",
            "mean        0.197246       0.071865       0.030400       0.022248   \n",
            "std         0.397921       0.258265       0.171686       0.161543   \n",
            "min         0.000000       0.000000       0.000000       0.000000   \n",
            "25%         0.000000       0.000000       0.000000       0.000000   \n",
            "50%         0.000000       0.000000       0.000000       0.000000   \n",
            "75%         0.000000       0.000000       0.000000       0.000000   \n",
            "max         1.000000       1.000000       1.000000       4.000000   \n",
            "\n",
            "        SMS_received  \n",
            "count  110527.000000  \n",
            "mean        0.321026  \n",
            "std         0.466873  \n",
            "min         0.000000  \n",
            "25%         0.000000  \n",
            "50%         0.000000  \n",
            "75%         1.000000  \n",
            "max         1.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming your dataframe is called df\n",
        "correlation_matrix = df.corr(numeric_only=True)\n"
      ],
      "metadata": {
        "id": "0CJ3ytorOrM_"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(correlation_matrix)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Iui2Hm0IOu45",
        "outputId": "43d8c935-e514-40b0-f50e-fb6641a8bf4f"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               PatientId  AppointmentID       Age  Scholarship  Hipertension  \\\n",
            "PatientId       1.000000       0.004039 -0.004139    -0.002880     -0.006441   \n",
            "AppointmentID   0.004039       1.000000 -0.019126     0.022615      0.012752   \n",
            "Age            -0.004139      -0.019126  1.000000    -0.092457      0.504586   \n",
            "Scholarship    -0.002880       0.022615 -0.092457     1.000000     -0.019729   \n",
            "Hipertension   -0.006441       0.012752  0.504586    -0.019729      1.000000   \n",
            "Diabetes        0.001605       0.022628  0.292391    -0.024894      0.433086   \n",
            "Alcoholism      0.011011       0.032944  0.095811     0.035022      0.087971   \n",
            "Handcap        -0.007916       0.014106  0.078033    -0.008586      0.080083   \n",
            "SMS_received   -0.009749      -0.256618  0.012643     0.001194     -0.006267   \n",
            "\n",
            "               Diabetes  Alcoholism   Handcap  SMS_received  \n",
            "PatientId      0.001605    0.011011 -0.007916     -0.009749  \n",
            "AppointmentID  0.022628    0.032944  0.014106     -0.256618  \n",
            "Age            0.292391    0.095811  0.078033      0.012643  \n",
            "Scholarship   -0.024894    0.035022 -0.008586      0.001194  \n",
            "Hipertension   0.433086    0.087971  0.080083     -0.006267  \n",
            "Diabetes       1.000000    0.018474  0.057530     -0.014550  \n",
            "Alcoholism     0.018474    1.000000  0.004648     -0.026147  \n",
            "Handcap        0.057530    0.004648  1.000000     -0.024161  \n",
            "SMS_received  -0.014550   -0.026147 -0.024161      1.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the descriptive Statistics we can establish the following insights;\n",
        "The data was collected from a sample of 110527 patients.\n",
        "The age distribution ranges from -1 to 115 years Most patients fall between 18 (25th percentile) and 55 (75th percentile), with a median and mean of approximately 37 years. This suggests more oung and middle aged patients.\n",
        "The cases considered as high risk in this case (Hipertension,Diabetes,     Alcoholism) are not as high ,Hipertension is recorded as the highest with a mean of 19.7%   \n",
        "Only 32% of the patients recorded having received SMS reminders\n",
        "\n",
        "From the correlation matrix we are able to deduce that age and the high risk conditions have a high correlation ;age and Hipertension are at 0.5,age and Diabetes are at 0.2, also the chances of a patient having more than one high risk condition is observed as high with Hipertension and Diabetes at 0.4 correlation.Most of the other variables have near zero values suggesting low to no correlation"
      ],
      "metadata": {
        "id": "Yj1APSNuFPaM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Graphical Visualization"
      ],
      "metadata": {
        "id": "EM-bKvJeMATn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# No-show counts\n",
        "sns.countplot(data=df, x='No-show')\n",
        "plt.title('Show vs No-Show Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Gn0o8cdgMtYk",
        "outputId": "fe7f6bee-f7dd-4639-fe7e-bd3d50183e03"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk0AAAHHCAYAAACiOWx7AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAOTZJREFUeJzt3XlclWX+//H3AWRxAXeWZNSsBJSR3HEhS0Yym8YyU3NyTWcMbRRzmxLNKU1NcxuXmkqb0bJl1NJE/aHiRi5ojpqaX6O0URZTwB2E+/eHX+6vR1wuCT1Yr+fjcR6POdf1Off9ue8j8Z7r3OfGYVmWJQAAANyQm6sbAAAAuBsQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmoBfAIfDoYEDB7q6DVxl/vz5cjgc2rFjh6tbAVACCE1AKbZnzx49/fTTqlmzpry9vXXPPffod7/7nWbOnOnq1kqNsWPHyuFwyN/fX+fOnSsyX6tWLT3++OMlus+CggJ98MEHatasmSpXrqwKFSrogQceUI8ePfTVV1+V6L7uhCVLlqh9+/aqWrWqPD09FRQUpGeeeUZr1651dWuSpGPHjmns2LH6+uuvXd0KfuUITUAptWXLFjVu3Fi7d+9Wv379NGvWLD3//PNyc3PT9OnTXd1eqZORkaE5c+bckX29+OKL6tmzpwIDAzV27FhNnDhR7du311dffaWEhIQ70kNJsCxLvXv31lNPPaX09HTFxcVp7ty5io2N1Xfffae2bdtqy5Ytrm5Tx44d06uvvkpogst5uLoBANf2+uuvy8/PT9u3b1fFihWd5jIyMlzTVCkWERGhyZMn64UXXpCPj89t2096erpmz56tfv366e2333aamzZtmjIzM2/bvkvalClTNH/+fA0ePFhTp06Vw+Gw515++WX985//lIcHvyaAQqw0AaXU4cOHVa9evSKBSZKqV69+zdcsXbpU9evXl5eXl+rVq3fNVY9du3apffv28vX1Vfny5dW2bVunj5SysrLk7u6uGTNm2GMnTpyQm5ubqlSpIsuy7PEBAwYoICDgusfw6aefyuFwKCkpqcjcvHnz5HA4tHfvXklSWlqaevfurRo1asjLy0uBgYH6wx/+oO+///66279SfHy80tPTjVabzp49q6FDhyo4OFheXl6qW7eu3nzzTadju57U1FRZlqWWLVsWmXM4HNd8by5evKi4uDhVq1ZN5cqV05NPPnnNcDV79mzVq1dPXl5eCgoKUmxsrLKysuz5GTNmyN3d3WlsypQpcjgciouLs8fy8/NVoUIFjRgx4rrHcf78eU2YMEEhISF68803nQJToeeee05Nmza1n3/33Xfq3LmzKleurLJly6p58+ZasWKF02sKr+O6+n1bv369HA6H1q9fb4+1adNG9evX1zfffKOHH35YZcuW1T333KNJkyY5va5JkyaSpN69e8vhcMjhcGj+/PnXPTbgdiE0AaVUzZo1lZKSYoeKm9m0aZNeeOEFde3aVZMmTdKFCxfUqVMn/fTTT3bNvn371Lp1a+3evVvDhw/X6NGjlZqaqjZt2mjr1q2SpIoVK6p+/frasGGD07YdDodOnjypb775xh7fuHGjWrdufd2eOnTooPLly+vjjz8uMrd48WLVq1dP9evXlyR16tRJS5YsUe/evTV79my9+OKLOn36tI4cOWJ0/K1bt9YjjzyiSZMm6fz589etsyxLTzzxhN566y09+uijmjp1qurWrathw4Y5BY/rqVmzpiTpk08+ueY1VNcyaNAg7d69W2PGjNGAAQP0xRdfFLlwf+zYsYqNjVVQUJCmTJmiTp06ad68eWrXrp3y8vLsYywoKNCmTZvs123cuFFubm7auHGjPbZr1y6dOXNGUVFR1+1p06ZNOnnypJ599lm5u7vf9BjS09PVokULrVq1Si+88IJef/11XbhwQU888YSWLFlidB6u5dSpU3r00UfVoEEDTZkyRSEhIRoxYoRWrlwpSQoNDdW4ceMkSf3799c///lP/fOf/7zhsQG3jQWgVFq9erXl7u5uubu7W5GRkdbw4cOtVatWWbm5uUVqJVmenp7W//zP/9hju3fvtiRZM2fOtMc6duxoeXp6WocPH7bHjh07ZlWoUMGKioqyx2JjYy1/f3/7eVxcnBUVFWVVr17dmjNnjmVZlvXTTz9ZDofDmj59+g2Po1u3blb16tWtS5cu2WPHjx+33NzcrHHjxlmWZVmnTp2yJFmTJ082PT22MWPGWJKszMxMKykpyZJkTZ061Z6vWbOm1aFDB/v50qVLLUnWa6+95rSdp59+2nI4HE7n8Hp69OhhSbIqVapkPfnkk9abb75p7d+/v0jd+++/b0myoqOjrYKCAnt8yJAhlru7u5WVlWVZlmVlZGRYnp6eVrt27az8/Hy7btasWZYk67333rMsy7Ly8/MtX19fa/jw4ZZlWVZBQYFVpUoVq3Pnzpa7u7t1+vRpy7Isa+rUqZabm5t16tSp6x7D9OnTLUnWkiVLbnq8lmVZgwcPtiRZGzdutMdOnz5t1a5d26pVq5bdd+Exp6amOr1+3bp1liRr3bp19thDDz1kSbI++OADe+zixYtWQECA1alTJ3ts+/btliTr/fffN+oVuF1YaQJKqd/97ndKTk7WE088od27d2vSpEmKiYnRPffco88//7xIfXR0tOrUqWM//+1vfytfX1999913ki5/ZLN69Wp17NhR9957r10XGBioZ599Vps2bVJOTo6kyysa6enpOnjwoKTLqxlRUVFq3bq1vaKxadMmWZZ1w5UmSerSpYsyMjKcPpb59NNPVVBQoC5dukiSfHx85OnpqfXr1+vUqVPFOFuXRUVF6eGHH77hatOXX34pd3d3vfjii07jQ4cOlWVZ9grHjbz//vuaNWuWateurSVLluill15SaGio2rZtq//+979F6vv37+/08Vfr1q2Vn5+vH374QZL0//7f/1Nubq4GDx4sN7f/+89yv3795Ovra38E5ubmphYtWtirgPv379dPP/2kkSNHyrIsJScnS7r8ftWvX/+aH+0WKnyvK1SocNPjlS6ft6ZNm6pVq1b2WPny5dW/f399//33TiuQt6J8+fL64x//aD/39PRU06ZN7X+3QGlCaAJKsSZNmujf//63Tp06pW3btmnUqFE6ffq0nn766SK/pH7zm98UeX2lSpXsEJKZmalz586pbt26RepCQ0NVUFCgo0ePSpIdhDZu3KizZ89q165dat26taKiouzQtHHjRvn6+qpBgwY3PIZHH31Ufn5+Wrx4sT22ePFiRURE6IEHHpAkeXl5aeLEiVq5cqX8/f0VFRWlSZMmKS0tzfRU2caOHau0tDTNnTv3mvM//PCDgoKCioSF0NBQe16Szpw5o7S0NPtx5TVIbm5uio2NVUpKik6cOKFly5apffv2Wrt2rbp27Vpkn1e/N5UqVZIk+70p3OfV742np6fuvfdee166/N6kpKTo/Pnz2rhxowIDA9WwYUM1aNDAKdDeLMz6+vpKkk6fPn3DukI//PDDdf/tXHkMt6pGjRpFrqe68t8tUJoQmoC7gKenp5o0aaLx48drzpw5ysvL0yeffOJUc73rUiyDi5uvFhQUpNq1a2vDhg1KTk6WZVmKjIxU69atdfToUf3www/auHGjWrRo4bQyci1eXl7q2LGjlixZokuXLum///2vNm/ebK8yFRo8eLC+/fZbTZgwQd7e3ho9erRCQ0O1a9euW+o9KipKbdq0uem1TTfz5ptvKjAw0H4UXox8tSpVquiJJ57Ql19+qYceekibNm0qEiBK8r1p1aqV8vLylJyc7HRNWeEq4IEDB5SZmXnT0BQSEiLp8r3AStK1LiiXLq90XktJnhvgdiM0AXeZxo0bS5KOHz9+S6+rVq2aypYta3/kdqUDBw7Izc1NwcHB9ljhL+GNGzcqIiJCFSpUUIMGDeTn56eEhATt3LnT+GLcLl266MSJE0pMTNQnn3wiy7KKhCZJqlOnjoYOHarVq1dr7969ys3N1ZQpU27pOKX/W22aN29ekbmaNWvq2LFjRVZYDhw4YM9LUo8ePbRmzRr7sXDhwpvut7jvTeE+r35vcnNzlZqaas9LUtOmTeXp6Wm/N4XhKCoqSlu3blViYqL9/EZatWqlSpUq6cMPP7xuoLm6x+v927nyGApX0a78hp9U/JUo6fpBDLjTCE1AKbVu3bpr/r/tL7/8UlLRj3Juxt3dXe3atdOyZcucvg6enp6uRYsWqVWrVvZHNtLl0PT9999r8eLF9i/mwmtqpk6dqry8vJuuZhSKjo5W5cqVtXjxYi1evFhNmzZV7dq17flz587pwoULTq+pU6eOKlSooIsXL97ScUrSQw89pDZt2mjixIlFtvvYY48pPz9fs2bNchp/66235HA41L59e0nSvffeq+joaPtReIuBtLS0a16/k5ubq8TERLm5uem+++67pX6jo6Pl6empGTNmOL3n7777rrKzs9WhQwd7zNvbW02aNNGHH36oI0eOOK00nT9/XjNmzFCdOnUUGBh4w32WLVtWI0aM0P79+zVixIhr/lv717/+pW3btkm6fN62bdtmXzclXb51w9tvv61atWopLCxMkuzr6q789mV+fn6Re1rdinLlykkqGsSAO427lgGl1KBBg3Tu3Dk9+eSTCgkJUW5urrZs2aLFixerVq1a6t279y1v87XXXtOaNWvUqlUrvfDCC/Lw8NC8efN08eJFp3vjSP93XdPBgwc1fvx4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wYNOY99++61q1qwpSapdu7YCAgKUmJhoz+fk5Gjr1q2KjIyUJEVGRiorK0spKSl2zdq1a1VQUKBmzZrZNRs2bFBeXp5ds2bNGtWtW9f+pl5kZKTTfgprCvcDAAB+3VwamoYMGaKvvvpK48eP1//8z/9o0aJFevvttxUbGytJcjgcGjx4sF577TV9/vnn2rNnj3r06KGgoCB17NhR0uWVqUcffVT9+vXTtm3btHnzZg0cOFBdu3ZVUFCQJOnZZ5+Vp6en+vbtq3379mnx4sWaPn264uLi7F7+8pe/KCEhQVOmTNGBAwc0duxY7dixQwMHDrzj5wUAAJQ+Hq7ceZMmTbRkyRKNGjVK48aNU+3atTVt2jR1797drhk+fLjOnj2r/v37KysrS61atVJCQoK8vb3tmoULF2rgwIFq27at3Nzc1KlTJ82YMcOe9/Pz0+rVqxUbG6tGjRqpatWqio+Pd7qXU4sWLbRo0SK98sor+utf/6r7779fS5cuVf369e/MyQAAAKWaS+/T9EvCfZoA1+E+TQCK6665TxMAAMDdgtAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABgoFih6ZFHHlFWVlaR8ZycHD3yyCM/tycAAIBSp1ihaf369crNzS0yfuHCBW3cuPFnNwUAAFDaeNxK8X/+8x/7f3/zzTdKS0uzn+fn5yshIUH33HNPyXUHAABQStxSaIqIiJDD4ZDD4bjmx3A+Pj6aOXNmiTUHAABQWtxSaEpNTZVlWbr33nu1bds2VatWzZ7z9PRU9erV5e7uXuJNAgAAuNothaaaNWtKkgoKCm5LMwAAAKXVLYWmKx06dEjr1q1TRkZGkRAVHx//sxsDAAAoTYoVmt555x0NGDBAVatWVUBAgBwOhz3ncDgITQAA4BenWKHptdde0+uvv64RI0aUdD8AAAClUrHu03Tq1Cl17ty5pHsBAAAotYoVmjp37qzVq1eXdC8AAAClVrE+nrvvvvs0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JgC4Bb169VLHjh1d3QYAFyA0Abgr9erVSw6HQ2+88YbT+NKlS+VwOFzUFYBfMkITgLuWt7e3Jk6cqFOnTrm6FQC/AoQmAHet6OhoBQQEaMKECdet+eyzz1SvXj15eXmpVq1amjJlyk23++mnnyo8PFw+Pj6qUqWKoqOjdfbsWaeaN998U4GBgapSpYpiY2OVl5dnz506dUo9evRQpUqVVLZsWbVv316HDh2SJFmWpWrVqunTTz+16yMiIhQYGGg/37Rpk7y8vHTu3DnjcwHg9iM0Abhrubu7a/z48Zo5c6Z+/PHHIvMpKSl65pln1LVrV+3Zs0djx47V6NGjNX/+/Otu8/jx4+rWrZv69Omj/fv3a/369Xrqqad05Z/pXLdunQ4fPqx169ZpwYIFmj9/vtM2e/XqpR07dujzzz9XcnKyLMvSY489pry8PDkcDkVFRWn9+vWSLges/fv36/z58zpw4IAkKSkpSU2aNFHZsmVL5DwBKBkerm4AAH6OJ598UhERERozZozeffddp7mpU6eqbdu2Gj16tCTpgQce0DfffKPJkyerV69e19ze8ePHdenSJT311FOqWbOmJCk8PNypplKlSpo1a5bc3d0VEhKiDh06KDExUf369dOhQ4f0+eefa/PmzWrRooUkaeHChQoODtbSpUvVuXNntWnTRvPmzZMkbdiwQQ8++KACAgK0fv16hYSEaP369XrooYdK8jQBKAGsNAG4602cOFELFizQ/v37ncb379+vli1bOo21bNlShw4dUn5+vjZu3Kjy5cvbj4ULF6pBgwZq27atwsPD1blzZ73zzjtFrpmqV6+e3N3d7eeBgYHKyMiw9+nh4aFmzZrZ81WqVFHdunXt/h566CF98803yszMVFJSktq0aaM2bdpo/fr1ysvL05YtW9SmTZuSPEUASgChCcBdLyoqSjExMRo1atQtva5x48b6+uuv7ccTTzwhd3d3rVmzRitXrlRYWJhmzpypunXrKjU11X5dmTJlnLbjcDhUUFBgvN/w8HBVrlxZSUlJTqEpKSlJ27dvV15enr1KBaD0IDQB+EV444039MUXXyg5OdkeCw0N1ebNm53qNm/erAceeEDu7u7y8fHRfffdZz8qVKgg6XIIatmypV599VXt2rVLnp6eWrJkiVEfoaGhunTpkrZu3WqP/fTTTzp48KDCwsLs7bdu3VrLli3Tvn371KpVK/32t7/VxYsXNW/ePDVu3FjlypX7uacEQAkjNAH4RQgPD1f37t01Y8YMe2zo0KFKTEzU3/72N3377bdasGCBZs2apZdeeum629m6davGjx+vHTt26MiRI/r3v/+tzMxMhYaGGvVx//336w9/+IP69eunTZs2affu3frjH/+oe+65R3/4wx/sujZt2ujDDz9URESEypcvLzc3N0VFRWnhwoVczwSUUoQmAL8Y48aNc/qYrGHDhvr444/10UcfqX79+oqPj9e4ceOuexG4JPn6+mrDhg167LHH9MADD+iVV17RlClT1L59e+M+3n//fTVq1EiPP/64IiMjZVmWvvzyS6eP9R566CHl5+c7XbvUpk2bImMASg+HdeX3aAEAAHBNrDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAYIDQBAAAY+P9XY2IjwPuPXAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Age distribution\n",
        "sns.histplot(df['Age'], bins=30, kde=True)\n",
        "plt.title('Patient Age Distribution')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "sxhGF4GrM7qW",
        "outputId": "8c3ecb47-542b-43c5-860b-bf0a44cbf3bf"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gender breakdown\n",
        "sns.countplot(data=df, x='Gender', hue='No-show')\n",
        "plt.title('Gender vs No-Show')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "oujWucUWNIyf",
        "outputId": "6e2c38c6-2d03-4e8e-d233-590575967644"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd             #Create a preprocessing pipeline in Python using pandas and scikit-learn\n",
        "import numpy as np\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ],
      "metadata": {
        "id": "T-bhZ8UGTtob"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(path + \"/KaggleV2-May-2016.csv\")"
      ],
      "metadata": {
        "id": "JHCA06EYT05q"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# View missing values\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Drop columns with too many missing values (if any)\n",
        "df = df.dropna(axis=1, thresh=len(df) * 0.8)\n",
        "\n",
        "# Or fill them\n",
        "num_imputer = SimpleImputer(strategy='median')\n",
        "cat_imputer = SimpleImputer(strategy='most_frequent')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZFwEqsHoUBAI",
        "outputId": "7ddafd26-bcbe-4c26-ca8f-3c98ac65140e"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PatientId         0\n",
            "AppointmentID     0\n",
            "Gender            0\n",
            "ScheduledDay      0\n",
            "AppointmentDay    0\n",
            "Age               0\n",
            "Neighbourhood     0\n",
            "Scholarship       0\n",
            "Hipertension      0\n",
            "Diabetes          0\n",
            "Alcoholism        0\n",
            "Handcap           0\n",
            "SMS_received      0\n",
            "No-show           0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def remove_outliers_iqr(df, column):\n",
        "    Q1 = df[column].quantile(0.25)\n",
        "    Q3 = df[column].quantile(0.75)\n",
        "    IQR = Q3 - Q1\n",
        "    lower_bound = Q1 - 1.5 * IQR\n",
        "    upper_bound = Q3 + 1.5 * IQR\n",
        "    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]\n",
        "\n",
        "# Example: Treat 'Age'\n",
        "df = remove_outliers_iqr(df, 'Age')\n"
      ],
      "metadata": {
        "id": "U8Zn1HmmUD-q"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "When you're working with machine learning models, most algorithms can only work with numbers so we convert variables lik male and female into integers"
      ],
      "metadata": {
        "id": "j887QE3gWZI-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn\n",
        "from sklearn.preprocessing import OneHotEncoder           #convert variables like male and female into numbers\n",
        "\n",
        "if sklearn.__version__ >= \"1.2\":\n",
        "    cat_encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
        "else:\n",
        "    cat_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\n",
        "\n"
      ],
      "metadata": {
        "id": "8ZzmqXlaUIg6"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "TThen we turn Column names into meaningful numerical features for preprocessing.\n",
        "\n"
      ],
      "metadata": {
        "id": "FTP-Q331WA6k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
        "\n",
        "# Drop ID-like columns if needed\n",
        "numerical_cols = [col for col in numerical_cols if col not in ['PatientId', 'AppointmentID']]\n"
      ],
      "metadata": {
        "id": "j4wz0wIZUetM"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Machine learning models can’t handle missing values or strings. This preprocessor:\n",
        "\n",
        "Cleans up the data\n",
        "\n",
        "Makes everything numeric\n",
        "\n",
        "Ensures all features are on the same scale"
      ],
      "metadata": {
        "id": "qgwhZJeUV5yv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Column transformer- preprocessing pipeline in machine learning\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', Pipeline([\n",
        "            ('imputer', num_imputer),\n",
        "            ('scaler', StandardScaler())\n",
        "        ]), numerical_cols),\n",
        "\n",
        "        ('cat', Pipeline([\n",
        "            ('imputer', cat_imputer),\n",
        "            ('encoder', cat_encoder)\n",
        "        ]), categorical_cols)\n",
        "    ])\n"
      ],
      "metadata": {
        "id": "wNDYqSmZVhWh"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pca = PCA(n_components=0.95)  # keep 95% variance\n",
        "pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('pca', pca)\n",
        "])\n"
      ],
      "metadata": {
        "id": "VF84rSTZXFIL"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.columns.tolist())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4WW8mB3sYnjj",
        "outputId": "052e62ee-0143-4178-ff5a-8a418babf393"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['PatientId', 'AppointmentID', 'Gender', 'ScheduledDay', 'AppointmentDay', 'Age', 'Neighbourhood', 'Scholarship', 'Hipertension', 'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received', 'No-show']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
        "numerical_cols = [col for col in numerical_cols if col not in ['PatientId', 'AppointmentID', 'No-show']]  # make sure 'No-show' is NOT here\n",
        "\n",
        "categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()\n",
        "categorical_cols = [col for col in categorical_cols if col != 'No-show']  # make sure it's not here either\n"
      ],
      "metadata": {
        "id": "cHUC8Y2-ZSYy"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(numerical_cols)\n",
        "print(categorical_cols)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uUukyLdUZxkp",
        "outputId": "36ef74ff-98f0-4edd-9f80-f4bbf0c04504"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Age', 'Scholarship', 'Hipertension', 'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received']\n",
            "['Gender', 'ScheduledDay', 'AppointmentDay', 'Neighbourhood']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "import pandas as pd"
      ],
      "metadata": {
        "id": "nlh_IYmyaMRh"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned = df.drop(['PatientId', 'AppointmentID'], axis=1)\n",
        "X = df_cleaned.drop('No-show', axis=1)\n",
        "y = df_cleaned['No-show'].map({'No': 0, 'Yes': 1})  # encode target"
      ],
      "metadata": {
        "id": "aG0eMvQ2aNeF"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
        "categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()"
      ],
      "metadata": {
        "id": "js47OG0saR1Y"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_pipeline = Pipeline([\n",
        "    ('imputer', SimpleImputer(strategy='median')),\n",
        "    ('scaler', StandardScaler())\n",
        "])"
      ],
      "metadata": {
        "id": "2WpONeeLaYCW"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cat_pipeline = Pipeline([\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('encoder', OneHotEncoder(handle_unknown='ignore', sparse_output=False))  # For sklearn >= 1.2\n",
        "])"
      ],
      "metadata": {
        "id": "881CbYg4ac3O"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor = ColumnTransformer(transformers=[\n",
        "    ('num', num_pipeline, numerical_cols),\n",
        "    ('cat', cat_pipeline, categorical_cols)\n",
        "])"
      ],
      "metadata": {
        "id": "BseKSdUyahra"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor.fit(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "id": "1I6-s3iMalWv",
        "outputId": "e6be9177-1468-4c20-dcd0-6f6da75d53df"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'preprocessor' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1-1152230607.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpreprocessor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'preprocessor' is not defined"
          ]
        }
      ]
    }
  ]
}